//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_VRInteraction/MyVRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyVRInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyVRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyVRInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e3860e9f-8138-4e2f-a00c-a25f682ce068"",
            ""actions"": [
                {
                    ""name"": ""RightHandTriggerButton"",
                    ""type"": ""Button"",
                    ""id"": ""0c5790e1-ecd3-43c7-87f5-6649b6384b9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandTriggerButton"",
                    ""type"": ""Button"",
                    ""id"": ""745c89eb-8c7b-4c29-b950-be58d780cb8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bb535a4-cbb0-4daa-80ef-f864bf8e1fe6"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandTriggerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31fc8680-52de-4c6b-956a-273aa986cb02"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandTriggerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_RightHandTriggerButton = m_Player.FindAction("RightHandTriggerButton", throwIfNotFound: true);
        m_Player_LeftHandTriggerButton = m_Player.FindAction("LeftHandTriggerButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_RightHandTriggerButton;
    private readonly InputAction m_Player_LeftHandTriggerButton;
    public struct PlayerActions
    {
        private @MyVRInputActions m_Wrapper;
        public PlayerActions(@MyVRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightHandTriggerButton => m_Wrapper.m_Player_RightHandTriggerButton;
        public InputAction @LeftHandTriggerButton => m_Wrapper.m_Player_LeftHandTriggerButton;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @RightHandTriggerButton.started += instance.OnRightHandTriggerButton;
            @RightHandTriggerButton.performed += instance.OnRightHandTriggerButton;
            @RightHandTriggerButton.canceled += instance.OnRightHandTriggerButton;
            @LeftHandTriggerButton.started += instance.OnLeftHandTriggerButton;
            @LeftHandTriggerButton.performed += instance.OnLeftHandTriggerButton;
            @LeftHandTriggerButton.canceled += instance.OnLeftHandTriggerButton;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @RightHandTriggerButton.started -= instance.OnRightHandTriggerButton;
            @RightHandTriggerButton.performed -= instance.OnRightHandTriggerButton;
            @RightHandTriggerButton.canceled -= instance.OnRightHandTriggerButton;
            @LeftHandTriggerButton.started -= instance.OnLeftHandTriggerButton;
            @LeftHandTriggerButton.performed -= instance.OnLeftHandTriggerButton;
            @LeftHandTriggerButton.canceled -= instance.OnLeftHandTriggerButton;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnRightHandTriggerButton(InputAction.CallbackContext context);
        void OnLeftHandTriggerButton(InputAction.CallbackContext context);
    }
}
